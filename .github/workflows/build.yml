name: Build Deck KDE Image

on:
  pull_request:
    branches:
      - testing
      - unstable
    paths-ignore:
      - "**.md"
      - "**.txt"
      - "installer/**"
      - "repo_content/**"
      - "spec_files/**"
      - "post_install_files/**"
      - "press_kit/**"
      - "docs/**"
      - ".github/workflows/build_iso*.yml"
  push:
    branches:
      - testing
      - unstable
    paths-ignore:
      - "**.md"
      - "**.txt"
      - "repo_content/**"
      - "spec_files/**"
      - "post_install_files/**"
      - "press_kit/**"
      - ".github/workflows/build_iso*.yml"
  merge_group:
  workflow_dispatch:
    inputs:
      handwritten:
        description: 'Small changelog'
      fresh-rechunk:
        description: 'Clear rechunk history'
        type: boolean
        default: false

env:
  PULL_IMAGE_REGISTRY: ghcr.io/ublue-os
  PUSH_IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  push-ghcr:
    name: Build Deck KDE Image
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - base_image_flavor: main
            base_name: bazzite-deck
            base_image_name: kinoite
            target_image_flavor: main
            fedora_version: 42
            kernel_flavor: bazzite
            kernel_version: 6.15.6-113.bazzite.fc42.x86_64
            is_latest_version: true
            is_stable_version: true

    steps:
      - name: Mount BTRFS for podman storage
        uses: ublue-os/container-storage-action@main
        with:
          target-dir: /var/lib/containers

      - name: Define CONTAINER_TARGET
        run: echo "CONTAINER_TARGET=${{ matrix.base_name }}" >> $GITHUB_ENV

      - name: Define IMAGE_FLAVOR
        run: echo "IMAGE_FLAVOR=${{ matrix.target_image_flavor }}" >> $GITHUB_ENV

      - name: Define IMAGE_NAME
        run: |
          DESKTOP=""
          if [[ "${{ matrix.base_image_name }}" == "silverblue" ]]; then
            DESKTOP="-gnome"
          fi
          if [[ "${{ matrix.target_image_flavor }}" == "main" ]]; then
            echo "IMAGE_NAME=${{ matrix.base_name }}${DESKTOP}" >> $GITHUB_ENV
          else
            echo "IMAGE_NAME=${{ matrix.base_name }}${DESKTOP}-${{ matrix.target_image_flavor }}" >> $GITHUB_ENV
          fi

      - name: Define SHA_HEAD_SHORT
        run: echo "SHA_HEAD_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Verify base image
        uses: EyeCantCU/cosign-action/verify@v0.3.0
        with:
          containers: ${{ matrix.base_image_name }}-${{ matrix.base_image_flavor }}:${{ matrix.fedora_version }}
          pubkey: https://raw.githubusercontent.com/ublue-os/${{ matrix.base_image_flavor }}/main/cosign.pub
          registry: ${{ env.PULL_IMAGE_REGISTRY }}

      - name: Verify akmods image
        uses: EyeCantCU/cosign-action/verify@v0.3.0
        with:
          containers: akmods:${{ matrix.kernel_flavor }}-${{ matrix.fedora_version }}-${{ matrix.kernel_version }}
          pubkey: https://raw.githubusercontent.com/ublue-os/akmods/main/cosign.pub
          registry: ${{ env.PULL_IMAGE_REGISTRY }}

      - name: Checkout source
        uses: actions/checkout@v4

      - name: Check just syntax
        uses: ublue-os/just-action@v2

      - name: Pull base and akmods images
        uses: Wandalen/wretry.action@v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            sudo podman pull ${{ env.PULL_IMAGE_REGISTRY }}/${{ matrix.base_image_name }}-${{ matrix.base_image_flavor }}:${{ matrix.fedora_version }}
            sudo podman pull ${{ env.PULL_IMAGE_REGISTRY }}/akmods:${{ matrix.kernel_flavor }}-${{ matrix.fedora_version }}-${{ matrix.kernel_version }}

      - name: Get source image version
        id: labels
        uses: Wandalen/wretry.action@v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            skopeo inspect docker://${{ env.PULL_IMAGE_REGISTRY }}/${{ matrix.base_image_name }}-${{ matrix.base_image_flavor }}:${{ matrix.fedora_version }} > source.json
            ver=$(jq -r '.Labels["org.opencontainers.image.version"]' source.json)
            echo "SOURCE_IMAGE_VERSION=$ver" >> $GITHUB_ENV

      - name: Generate version tag
        id: generate-version
        run: |
          UPSTREAM_TAG="${{ env.SOURCE_IMAGE_VERSION }}"
          UPSTREAM_TAG="${UPSTREAM_TAG%\.[0-9]}"
          if [[ "${{ github.ref_name }}" == "unstable" ]]; then
            echo "tag=unstable-${UPSTREAM_TAG}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "testing" ]]; then
            echo "tag=testing-${UPSTREAM_TAG}" >> $GITHUB_OUTPUT
          else
            echo "tag=${UPSTREAM_TAG}" >> $GITHUB_OUTPUT
          fi

      - name: Prepare build-args
        run: |
          cat <<EOF > build_args.txt
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          IMAGE_FLAVOR=${{ env.IMAGE_FLAVOR }}
          IMAGE_VENDOR=${{ github.repository_owner }}
          BASE_IMAGE_NAME=${{ matrix.base_image_name }}
          BASE_IMAGE_FLAVOR=${{ matrix.base_image_flavor }}
          FEDORA_VERSION=${{ matrix.fedora_version }}
          KERNEL_FLAVOR=${{ matrix.kernel_flavor }}
          KERNEL_VERSION=${{ matrix.kernel_version }}
          IMAGE_BRANCH=${{ github.ref_name }}
          SHA_HEAD_SHORT=${{ env.SHA_HEAD_SHORT }}
          VERSION_TAG=${{ steps.generate-version.outputs.tag }}
          EOF

      - name: Build image with Buildah
        id: build_image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo -E buildah build \
            --target ${{ env.CONTAINER_TARGET }} \
            --build-arg-file build_args.txt \
            --secret id=GITHUB_TOKEN,env=GITHUB_TOKEN \
            --tag raw-img .

      - name: Lowercase PUSH_IMAGE_REGISTRY
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.PUSH_IMAGE_REGISTRY }}

      - name: Generate previous image reference
        id: generate-prev-ref
        run: |
          if [[ "${{ github.event.inputs.fresh-rechunk }}" == "true" ]]; then
            echo "ref=" >> $GITHUB_OUTPUT
          else
            echo "ref=${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}:stable" >> $GITHUB_OUTPUT
          fi

      - name: Rechunk raw image
        id: rechunk
        uses: hhd-dev/rechunk@v1.2.3
        with:
          rechunk: ghcr.io/hhd-dev/rechunk:v1.2.3
          ref: raw-img
          prev-ref: '${{ steps.generate-prev-ref.outputs.ref }}'
          version: '${{ steps.generate-version.outputs.tag }}'

      - name: Generate tags array
        id: generate-tags
        run: echo "alias_tags=${{ steps.rechunk.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Push to GHCR
        if: github.event_name != 'pull_request'
        uses: Wandalen/wretry.action@v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo podman login ghcr.io -u ${{ github.actor }} --password-stdin
            for tag in ${{ steps.generate-tags.outputs.alias_tags }}; do
              dest="${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}:$tag"
              sudo skopeo copy ${{ steps.rechunk.outputs.ref }} docker://$dest
            done

      - name: Get Image Digest
        id: digest
        run: |
          DIGEST=$(sudo skopeo inspect --format '{{.Digest}}' ${{ steps.rechunk.outputs.ref }})
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

      - name: Sign container image
        if: github.event_name != 'pull_request'
        uses: EyeCantCU/cosign-action/sign@v0.3.0
        with:
          containers: ${{ env.IMAGE_NAME }}
          registry-token: ${{ secrets.GITHUB_TOKEN }}
          signing-secret: ${{ secrets.SIGNING_SECRET }}
          tags: ${{ steps.digest.outputs.digest }}
          registry: ${{ env.PUSH_IMAGE_REGISTRY }}

  generate_release:
    name: Generate Release
    needs: [push-ghcr]
    if: github.event_name != 'pull_request'
    secrets: inherit
    uses: ./.github/workflows/generate_release.yml
